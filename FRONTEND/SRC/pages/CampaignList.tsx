import React, { useState, useEffect } from "react";
import Layout from "@components/layout/Layout";
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { Search } from "lucide-react";
import './CampaignList.css'; // We'll create this CSS file


// 1. UPDATED interface to match your backend's Campaign model
interface Campaign {
Â  _id: string;
Â  name: string;
Â  caption: string;
Â  status: "scheduled" | "published" | "failed";
Â  postDate: string; // The backend sends dates as ISO strings
}


const CampaignList: React.FC = () => {
Â  const [campaigns, setCampaigns] = useState<Campaign[]>([]);
Â  const [searchTerm, setSearchTerm] = useState("");
Â  const [filter, setFilter] = useState("all");
Â  
Â  // NEW: State for loading and errors
Â  const [loading, setLoading] = useState<boolean>(true);
Â  const [error, setError] = useState<string | null>(null);
Â  
Â  const navigate = useNavigate();


Â  // 2. REPLACED sample data with a real API call
Â  useEffect(() => {
Â  Â  const fetchCampaigns = async () => {
Â  Â  Â  const token = localStorage.getItem('token');
Â  Â  Â  if (!token) {
Â  Â  Â  Â  navigate('/login');
Â  Â  Â  Â  return;
Â  Â  Â  }


Â  Â  Â  try {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  const response = await axios.get('http://localhost:5000/api/campaigns', {
Â  Â  Â  Â  Â  headers: { Authorization: `Bearer ${token}` },
Â  Â  Â  Â  });
Â  Â  Â  Â  setCampaigns(response.data);
Â  Â  Â  Â  setError(null);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Failed to fetch campaigns:", err);
Â  Â  Â  Â  setError('Could not load your campaigns. Please try again.');
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  };


Â  Â  fetchCampaigns();
Â  }, [navigate]);


Â  // This logic remains the same, but now works on real data
Â  const filteredCampaigns = campaigns.filter(
Â  Â  (c) =>
Â  Â  Â  c.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
Â  Â  Â  (filter === "all" || c.status === filter)
Â  );


Â  // 3. UPDATED status colors to match backend statuses
Â  const getStatusColor = (status: string) => {
Â  Â  switch (status) {
Â  Â  Â  case "published":
Â  Â  Â  Â  return "text-green-400 bg-green-900/30";
Â  Â  Â  case "scheduled":
Â  Â  Â  Â  return "text-yellow-400 bg-yellow-900/30";
Â  Â  Â  case "failed":
Â  Â  Â  Â  return "text-red-400 bg-red-900/30";
Â  Â  Â  default:
Â  Â  Â  Â  return "text-gray-300 bg-gray-700";
Â  Â  }
Â  };


Â  return (
Â  Â  <div >
Â  Â  Â  <div className="create-campaign-card">
Â  Â  Â  Â  <h2 className="section-title">ðŸ“‹ Campaign List</h2>


Â  Â  Â  Â  {/* Search & Filter Section (Your excellent UI is preserved) */}
Â  Â  Â  Â  <div className="form-row margin-bottom-20">
Â  Â  Â  Â  Â  <div className="form-group form-row-item relative">
Â  Â  Â  Â  Â  Â  <Search className="absolute left-3 top-3 text-gray-400" size={18} />
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  placeholder="Search campaigns..."
Â  Â  Â  Â  Â  Â  Â  value={searchTerm}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setSearchTerm(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  className="create-campaign-input padded-left"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div className="form-group form-row-item max-width-180">
Â  Â  Â  Â  Â  Â  <label htmlFor="campaignFilter" className="sr-only">
Â  Â  Â  Â  Â  Â  Â  Filter campaigns by status
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  {/* 4. UPDATED filter options */}
Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  id="campaignFilter"
Â  Â  Â  Â  Â  Â  Â  value={filter}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFilter(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  className="create-campaign-select"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <option value="all">All Statuses</option>
Â  Â  Â  Â  Â  Â  Â  <option value="scheduled">Scheduled</option>
Â  Â  Â  Â  Â  Â  Â  <option value="published">Published</option>
Â  Â  Â  Â  Â  Â  Â  <option value="failed">Failed</option>
Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>


Â  Â  Â  Â  {/* Campaign Table */}
Â  Â  Â  Â  <div className="overflow-x-auto">
Â  Â  Â  Â  Â  {loading && <p className="text-gray-400 text-center py-8">Loading campaigns...</p>}
Â  Â  Â  Â  Â  {error && <p className="text-red-500 text-center py-8">{error}</p>}
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {!loading && !error && filteredCampaigns.length === 0 && (
Â  Â  Â  Â  Â  Â  Â <div className="no-campaigns">
Â  Â  Â  Â  Â  Â  Â  Â  <p>No campaigns found.</p>
Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => navigate('/create-campaign')} className="create-first-campaign-btn">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Create Your First Campaign
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}


Â  Â  Â  Â  Â  {!loading && !error && filteredCampaigns.length > 0 && (
Â  Â  Â  Â  Â  Â  <table className="min-w-full rounded-lg bg-gray-800 text-white">
Â  Â  Â  Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  Â  Â  Â  <tr className="text-left text-teal-400 border-b border-gray-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="py-3 px-4">Campaign Name</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="py-3 px-4">Status</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="py-3 px-4">Scheduled For</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="py-3 px-4">Caption</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="py-3 px-4 text-center">Actions</th>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  Â  {filteredCampaigns.map((campaign) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr key={campaign._id} className="border-b border-gray-700 hover:bg-gray-700 transition">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="py-3 px-4 font-medium">{campaign.name}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="py-3 px-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={`px-3 py-1 rounded-full text-xs font-semibold ${getStatusColor(campaign.status)}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* 5. Displaying real data from the backend */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="py-3 px-4">{new Date(campaign.postDate).toLocaleString()}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="py-3 px-4 caption-cell">{campaign.caption}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="py-3 px-4 flex justify-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="text-blue-400 hover:text-blue-500 text-sm font-semibold">View</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="text-yellow-400 hover:text-yellow-500 text-sm font-semibold">Edit</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="text-red-400 hover:text-red-500 text-sm font-semibold">Delete</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};


export default CampaignList;